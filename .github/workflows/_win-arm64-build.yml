name: windows-arm64-build

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
        description: Top-level label for what's being built/tested.
      cuda-version:
        required: false
        type: string
        description: What CUDA version to build with, "cpu" for none.
        default: "cpu"
      use-xpu:
        required: false
        type: boolean
        default: false
        description: If set, build with XPU support.
      xpu-version:
        required: false
        type: string
        description: The version of XPU support package.
      vc-year:
        required: false
        type: string
        default: "2022"
        description: The Visual Studio year to use for building.
      build-with-debug:
        required: false
        type: boolean
        default: false
        description: If set, build in debug mode.
      sync-tag:
        required: false
        type: string
        default: ""
        description: |
          If this is set, our linter will use this to make sure that every other
          job with the same `sync-tag` is identical.
      test-matrix:
        required: false
        type: string
        description: |
          An option JSON description of what test configs to run later on. This
          is moved here from the Linux test workflow so that we can apply filter
          logic using test-config labels earlier and skip unnecessary builds
      runner:
        required: false
        type: string
        default: windows-11-arm64
        description: |
          Label of the runner this job should run on.
  
    outputs:
      test-matrix:
        value: ${{ jobs.build.outputs.test-matrix }}
        description: An optional JSON description of what test configs to run later on.
  push:
    tags:
      - ciflow/win-arm64/*
          

env:
  GIT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  PYTHON_VERSION: "3.12"
  PYTORCH_ROOT: ${{ github.workspace }}/pytorch
  DOWNLOADS_DIR: c:\temp\downloads
  DEPENDENCIES_DIR: c:\temp\dependencies
  ENABLE_APL: 1
  ENABLE_OPENBLAS: 0
  MSVC_VERSION: latest
  BUILD_TYPE: release

permissions:
  id-token: write
  contents: read

jobs:
  build:
    # Don't run on forked repos.
    if: github.repository_owner == 'pytorch'
    runs-on: "windows-11-arm64"
    timeout-minutes: 240
    outputs:
      test-matrix: ${{ steps.filter.outputs.test-matrix }}
    defaults:
      run:
        shell: bash
    steps:
      - name: configure aws credentials
        id: aws_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::308535385114:role/gha_workflow_sscache
          aws-region: us-east-1
          role-duration-seconds: 18000
          
      - name: Git checkout PyTorch
        uses: actions/checkout@v4
        with:
          path: pytorch

      - name: Bootstrap Python
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_python.bat"

      - name: Bootstrap Git
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_git.bat"

      - name: Remove Pytorch folder
        shell: cmd
        run: |
          rmdir /s /q "%PYTORCH_ROOT%"

      - name: Git checkout PyTorch - recursive
        uses: actions/checkout@v4
        with:
          path: "pytorch"
          submodules: recursive

      - name: Parse ref
        id: parse-ref
        shell: bash
        run: python pytorch/.github/scripts/parse_ref.py

      - name: Get workflow job id
        id: get-job-id
        uses: ./pytorch/.github/actions/get-workflow-job-id
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bootstrap Build Tools
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_buildtools.bat"

      - name: Bootstrap APL
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_apl.bat"

      - name: Bootstrap Rust
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_rust.bat"

      - name: Bootstrap sccache
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_sccache.bat"

      - name: Bootstrap Libuv
        shell: cmd
        run: |
          "pytorch/.ci/pytorch/windows/arm64/bootstrap_libuv.bat"

      - name: Build
        id: build
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
          BUILD_WHEEL: 1
          MAX_JOBS: 8
          PYTHON_VERSION: "3.12"
          SCCACHE_BUCKET: "ossci-compiler-cache"
          SCCACHE_S3_KEY_PREFIX: ${{ github.workflow }}
          SCCACHE_REGION: us-east-1
          VC_PRODUCT: "BuildTools"
          VC_VERSION: ""
          VC_YEAR: "${{ inputs.vc-year }}"
          ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
          AWS_DEFAULT_REGION: us-east-1
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          DEBUG: ${{ inputs.build-with-debug && '1' || '0' }}
          USE_CUDA: '0'
          USE_XPU: '0'
          XPU_VERSION: "${{ inputs.xpu-version }}"
          OUR_GITHUB_JOB_ID: ${{ steps.get-job-id.outputs.job-id }}
        run: |
          cd pytorch
          ./.ci/pytorch/win-arm64-build.sh

      - name: Upload artifacts to s3
        if: steps.build.outcome != 'skipped'
        uses: seemethere/upload-artifact-s3@v5
        with:
          retention-days: 14
          if-no-files-found: error
          name: ${{ inputs.build-environment }}
          path: C:\${{ github.run_id }}\build-results

      - name: Upload sccache stats
        if: steps.build.outcome != 'skipped'
        uses: ./.github/actions/upload-sccache-stats
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}